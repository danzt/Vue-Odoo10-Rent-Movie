'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Rpc = function () {
  function Rpc() {
    _classCallCheck(this, Rpc);

    this._defaults = {
      jsonrpc: '2.0',
      method: 'call'
    };

    this.instanceAxios = _axios2.default.create();
    this.instanceAxios.interceptors.response.use(function (response) {
      if (Object.prototype.hasOwnProperty.call(response.data, 'error')) {
        return Promise.reject(response.data.error);
      }
      return response;
    }, function (err) {
      return Promise.reject(err);
    });
  }

  /**
   * Create axios request
   *
   * @param {String} url
   * @param {Object} params
   *
   * @returns {Promise}
   */


  _createClass(Rpc, [{
    key: '__jsonrpc',
    value: function __jsonrpc(url, params) {
      return this.instanceAxios.post(url, _extends({}, this._defaults, {
        id: Math.floor(Math.random() * 1000 * 1000 * 1000),
        params: params
      }));
    }

    /**
     * Create axios request
     *
     * @param {String} url
     * @param {Object} params
     *
     * @returns {Promise}
     */

  }, {
    key: 'rpc',
    value: function rpc(url, params) {
      return this.__jsonrpc(url, params);
    }
  }]);

  return Rpc;
}();

exports.default = Rpc;