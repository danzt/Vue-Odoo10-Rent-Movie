'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _rpc = require('./rpc');

var _rpc2 = _interopRequireDefault(_rpc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseModel = function (_Rpc) {
  _inherits(BaseModel, _Rpc);

  function BaseModel(name) {
    _classCallCheck(this, BaseModel);

    var _this = _possibleConstructorReturn(this, (BaseModel.__proto__ || Object.getPrototypeOf(BaseModel)).call(this));

    _this.name = name;
    return _this;
  }

  _createClass(BaseModel, [{
    key: 'call',
    value: function call(_ref) {
      var method = _ref.method,
          _ref$args = _ref.args,
          args = _ref$args === undefined ? [] : _ref$args,
          _ref$kwargs = _ref.kwargs,
          kwargs = _ref$kwargs === undefined ? {} : _ref$kwargs;

      var url = '/web/dataset/call_kw/' + this.name + '/' + method;
      return _get(BaseModel.prototype.__proto__ || Object.getPrototypeOf(BaseModel.prototype), 'rpc', this).call(this, url, {
        model: this.name, method: method, args: args, kwargs: kwargs
      });
    }
  }, {
    key: 'search_read',
    value: function search_read(_ref2) {
      var _ref2$fields = _ref2.fields,
          fields = _ref2$fields === undefined ? false : _ref2$fields,
          domain = _ref2.domain,
          context = _ref2.context,
          offset = _ref2.offset,
          limit = _ref2.limit,
          sort = _ref2.sort;

      return _get(BaseModel.prototype.__proto__ || Object.getPrototypeOf(BaseModel.prototype), 'rpc', this).call(this, '/web/dataset/search_read', {
        model: this.name, fields: fields, domain: domain, context: context, offset: offset, limit: limit, sort: sort
      });
    }
  }, {
    key: 'call_button',
    value: function call_button(_ref3) {
      var method = _ref3.method,
          _ref3$args = _ref3.args,
          args = _ref3$args === undefined ? [] : _ref3$args;

      return _get(BaseModel.prototype.__proto__ || Object.getPrototypeOf(BaseModel.prototype), 'rpc', this).call(this, '/web/dataset/call_button', {
        model: this.name, method: method, domain_id: null, args: args
      });
    }
  }, {
    key: 'exec_workflow',
    value: function exec_workflow(id, signal) {
      return _get(BaseModel.prototype.__proto__ || Object.getPrototypeOf(BaseModel.prototype), 'rpc', this).call(this, '/web/dataset/exec_workflow', { model: this.name, id: id, signal: signal });
    }
  }]);

  return BaseModel;
}(_rpc2.default);

exports.default = BaseModel;