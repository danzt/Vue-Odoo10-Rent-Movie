'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _base_model = require('./base_model');

var _base_model2 = _interopRequireDefault(_base_model);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Model = function (_BaseModel) {
  _inherits(Model, _BaseModel);

  function Model() {
    var _ref;

    _classCallCheck(this, Model);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = Model.__proto__ || Object.getPrototypeOf(Model)).call.apply(_ref, [this].concat(args)));

    _this._fields = [];
    _this._order_by = [];
    _this._offset = 0;
    _this._limit = false;
    _this._filter = [];
    _this._context = {};
    return _this;
  }

  /**
   * Filter
   * @param {Array} domain
   */


  _createClass(Model, [{
    key: 'filter',
    value: function filter(domain) {
      return this.clone({ filter: domain });
    }

    /**
     * Limit
     * @param {Number} limitParam
     */

  }, {
    key: 'limit',
    value: function limit(limitParam) {
      return this.clone({ limit: limitParam });
    }

    /**
     * Offset
     * @param {Number} offsetParam
     */

  }, {
    key: 'offset',
    value: function offset(offsetParam) {
      return this.clone({ offset: offsetParam });
    }

    /**
     * Get context model
     *
     * @returns {Object}
     */

  }, {
    key: 'get_context',
    value: function get_context() {
      return this._context;
    }

    /**
     * ----------
     *
     * @returns {Promise}
     */

  }, {
    key: 'call',
    value: function call() {
      var _get2;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_get2 = _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this)).call.apply(_get2, [this].concat(args));
    }

    /**
     *
     * @returns {Promise}
     */

  }, {
    key: 'call_button',
    value: function call_button() {
      var _get3;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return (_get3 = _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call_button', this)).call.apply(_get3, [this].concat(args));
    }

    /**
     *
     * @returns {Promise}
     */

  }, {
    key: 'exec_workflow',
    value: function exec_workflow(id, signal) {
      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'exec_workflow', this).call(this, id, signal);
    }

    /**
     * Clone model
     *
     * @returns {Object} [Model]
     */

  }, {
    key: 'clone',
    value: function clone(propSet) {
      var _this2 = this;

      Object.keys(propSet).forEach(function (key) {
        switch (key) {
          case 'filter':
            _this2._computedFilter(propSet[key]);
            break;
          case 'limit':
            _this2._limit = propSet[key];
            break;
          case 'offset':
            _this2._offset = propSet[key];
            break;
          default:
            break;
        }
      });

      return Object.assign(Object.create(Object.getPrototypeOf(this)), this);
    }

    /**
     * Creates a new record in db
     *
     * @param {Object} data field values to set on the new record
     * @param {Object} options
     * @returns {Promise}
     */

  }, {
    key: 'create',
    value: function create(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'create',
        args: [data],
        kwargs: { context: this.get_context() }
      });
    }

    /**
     * Saves the provided data in an existing db record
     *
     * @param {Number|String} id identifier for the record to alter
     * @param {Object} data field values to write into the record
     * @param {Object} options
     * @returns {Promise}
     */

  }, {
    key: 'write',
    value: function write(id, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'write',
        args: [[id], data],
        kwargs: { context: this.get_context() }
      });
    }

    /**
     * Deletes an existing record from the database
     *
     * @param {Number|String} ids identifier of the record to delete
     * @returns {Promise}
     */

  }, {
    key: 'unlink',
    value: function unlink(ids) {
      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'unlink',
        args: [ids],
        kwargs: { context: this.get_context() }
      });
    }

    /**
     * Count all records
     *
     * @returns {Promise}
     */

  }, {
    key: 'count',
    value: function count() {
      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'search_count',
        args: [this._filter],
        kwargs: { context: this.get_context() }
      }).then(function (response) {
        return response.data.result;
      });
    }

    /**
     * Fetches the "readable name" for records, based on intrinsic rules
     *
     * @param {Array} ids
     * @returns {Promise}
     */

  }, {
    key: 'name_get',
    value: function name_get() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'name_get',
        args: [ids],
        kwargs: { context: this.get_context() }
      }).then(function (response) {
        return response.data.result;
      });
    }

    /**
     *
     * @param {String} nameSearch name to perform a search for/on
     * @returns {Promise}
     */

  }, {
    key: 'name_search',
    value: function name_search() {
      var nameSearch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, 'name_search', {
        name: nameSearch,
        args: this._filter,
        operator: 'ilike',
        context: this.get_context(),
        limit: this._limit
      });
    }

    /**
     * Fetches all fields to model
     *
     * @returns {Promise}
     */

  }, {
    key: 'fields',
    value: function fields() {
      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'call', this).call(this, {
        method: 'fields_get',
        kwargs: { context: this.get_context() }
      }).then(function (response) {
        return response.data.result;
      });
    }

    /**
     * Fetches all records matching the query
     *
     * @returns {Promise}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._execute().then(function (response) {
        return response.data.result;
      });
    }

    /**
     * Execute query
     *
     * @returns {Promise}
     */

  }, {
    key: 'get',
    value: function get() {
      return this._execute().then(function (response) {
        return response.data.result;
      });
    }
  }, {
    key: '_execute',
    value: function _execute() {
      return _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'search_read', this).call(this, {
        fields: this._fields,
        domain: this._filter,
        context: this.get_context(),
        offset: this._offset,
        limit: this._limit,
        sort: this._order_by
      });
    }
  }, {
    key: '_computedFilter',
    value: function _computedFilter(domain) {
      if (Array.isArray(domain)) {
        this._filter.push(domain);
      }
    }
  }]);

  return Model;
}(_base_model2.default);

exports.default = Model;